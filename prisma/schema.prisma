generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Movie {
  id                   Int               @id @default(autoincrement())
  movieTitle           String?           @map("movie_title") @db.VarChar(255)
  movieOriginalTitle   String?           @map("movie_original_title") @db.VarChar(255)
  movieYear            String?           @map("movie_year") @db.VarChar(255)
  movieReleaseDate     DateTime?         @map("movie_release_date") @db.Date
  movieRuntime         Int?              @map("movie_runtime")
  movieTagline         String?           @map("movie_tagline")
  movieOverview        String?           @map("movie_overview")
  movieContentRating   String?           @map("movie_content_rating") @db.VarChar(255)
  movieBudget          String?           @map("movie_budget")
  movieBoxOffice       String?           @map("movie_box_office")
  moviePoster          String?           @map("movie_poster")
  movieBackdrop        String?           @map("movie_backdrop")
  movieTrailer         String?           @map("movie_trailer")
  movieTmdbId          String?           @map("movie_tmdb_id")
  movieTmdbUrl         String?           @map("movie_tmdb_url")
  movieTmdbRating      String?           @map("movie_tmdb_rating")
  movieTmdbVotes       String?           @map("movie_tmdb_votes")
  movieImdbId          String?           @map("movie_imdb_id")
  movieImdbUrl         String?           @map("movie_imdb_url")
  movieCharacters      Json?             @map("movie_characters")
  movieAmazonLink      String?           @map("movie_amazon_link") @db.VarChar(555)
  movieActors          Json?             @map("movie_actors")
  movieDirectors       Json?             @map("movie_directors")
  movieWriters         Json?             @map("movie_writers")
  movieGenres          Json?             @map("movie_genres")
  movieCountries       Json?             @map("movie_countries")
  movieLanguages       Json?             @map("movie_languages")
  movieStudios         Json?             @map("movie_studios")
  wordpressId          Int?              @unique @map("wordpress_id")
  podsData             Json?             @map("pods_data")
  slug                 String?           @unique @db.VarChar(255)
  syncStatus           String            @default("pending") @map("sync_status") @db.VarChar(20)
  excludeFromTmdbSync  Boolean           @default(false) @map("exclude_from_tmdb_sync")
  shown3D              Boolean           @default(false) @map("shown_3d")
  lastSynced           DateTime?         @map("last_synced")
  lastTmdbFetch        DateTime?         @map("last_tmdb_fetch")
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @updatedAt @map("updated_at")
  rottenTomatoesRating String?           @map("rotten_tomatoes_rating") @db.VarChar(50)
  rottenTomatoesUrl    String?           @map("rotten_tomatoes_url")
  imdbRating           String?           @map("imdb_rating") @db.VarChar(50)
  imdbVotes            String?           @map("imdb_votes") @db.VarChar(50)
  metacriticRating     String?           @map("metacritic_rating") @db.VarChar(50)
  awards               String?           @map("awards")
  dvdRelease           String?           @map("dvd_release") @db.VarChar(50)
  websiteUrl           String?           @map("website_url")
  boxOfficeEnhanced    String?           @map("box_office_enhanced")
  plotEnhanced         String?           @map("plot_enhanced")
  movieExperiments     MovieExperiment[]

  @@map("movies")
}

model Actor {
  id                      Int       @id @default(autoincrement())
  actorName               String    @map("actor_name") @db.VarChar(255)
  profileImage            String?   @map("profile_image")
  actorBiography          String?   @map("actor_biography")
  actorBirthday           DateTime? @map("actor_birthday") @db.Date
  actorDeathday           DateTime? @map("actor_deathday") @db.Date
  actorPlaceOfBirth       String?   @map("actor_place_of_birth") @db.VarChar(255)
  actorMovieCount         String?   @map("actor_movie_count")
  actorPopularity         String?   @map("actor_popularity")
  actorKnownForDepartment String?   @map("actor_known_for_department") @db.VarChar(255)
  actorImdbId             String?   @map("actor_imdb_id")
  actorImdbUrl            String?   @map("actor_imdb_url")
  actorTmdbUrl            String?   @map("actor_tmdb_url")
  actorInstagramId        String?   @map("actor_instagram_id") @db.VarChar(255)
  actorTwitterId          String?   @map("actor_twitter_id_") @db.VarChar(255)
  actorFacebookId         String?   @map("actor_facebook_id") @db.VarChar(255)
  relatedMoviesActor      Json?     @map("related_movies_actor")
  wordpressId             Int?      @unique @map("wordpress_id")
  podsData                Json?     @map("pods_data")
  syncStatus              String    @default("pending") @map("sync_status") @db.VarChar(20)
  lastSynced              DateTime? @map("last_synced")
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")

  @@map("actors")
}

model Director {
  id                    Int       @id @default(autoincrement())
  directorName          String    @map("director_name") @db.VarChar(255)
  directorBiography     String?   @map("director_biography")
  directorMovieCount    String?   @map("director_movie_count")
  directorBirthday      DateTime? @map("director_birthday") @db.Date
  directorDeathday      DateTime? @map("director_deathday") @db.Date
  directorPlaceOfBirth  String?   @map("director_place_of_birth") @db.VarChar(255)
  directorPopularity    String?   @map("director_popularity")
  directorProfileImage  String?   @map("director_profile_image")
  directorImdbId        String?   @map("director_imdb_id")
  directorImdbUrl       String?   @map("director_imdb_url")
  directorTmdbUrl       String?   @map("director_tmdb_url")
  directorInstagramId   String?   @map("director_instagram_id") @db.VarChar(255)
  directorTwitterId     String?   @map("director_twitter_id") @db.VarChar(255)
  directorFacebookId    String?   @map("director_facebook_id") @db.VarChar(255)
  relatedMoviesDirector Json?     @map("related_movies_director")
  wordpressId           Int?      @unique @map("wordpress_id")
  podsData              Json?     @map("pods_data")
  syncStatus            String    @default("pending") @map("sync_status") @db.VarChar(20)
  lastSynced            DateTime? @map("last_synced")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  @@map("directors")
}

model Writer {
  id                  Int       @id @default(autoincrement())
  writerName          String    @map("writer_name") @db.VarChar(255)
  writerBiography     String?   @map("writer_biography")
  writerMovieCount    String?   @map("writer_movie_count")
  writerBirthday      DateTime? @map("writer_birthday") @db.Date
  writerDeathday      DateTime? @map("writer_deathday") @db.Date
  writerPlaceOfBirth  String?   @map("writer_place_of_birth") @db.VarChar(255)
  writerPopularity    String?   @map("writer_popularity")
  writerProfileImage  String?   @map("writer_profile_image")
  writerImdbId        String?   @map("writer_imdb_id")
  writerImdbUrl       String?   @map("writer_imdb_url")
  writerTmdbUrl       String?   @map("writer_tmdb_url")
  writerInstagramId   String?   @map("writer_instagram_id") @db.VarChar(255)
  writerTwitterId     String?   @map("writer_twitter_id") @db.VarChar(255)
  writerFacebookId    String?   @map("writer_facebook_id") @db.VarChar(255)
  relatedMoviesWriter Json?     @map("related_movies_writer")
  wordpressId         Int?      @unique @map("wordpress_id")
  podsData            Json?     @map("pods_data")
  syncStatus          String    @default("pending") @map("sync_status") @db.VarChar(20)
  lastSynced          DateTime? @map("last_synced")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  @@map("writers")
}

model Studio {
  id                  Int       @id @default(autoincrement())
  studioName          String    @map("studio_name") @db.VarChar(255)
  relatedMoviesStudio Json?     @map("related_movies_studio")
  wordpressId         Int?      @unique @map("wordpress_id")
  podsData            Json?     @map("pods_data")
  syncStatus          String    @default("pending") @map("sync_status") @db.VarChar(20)
  lastSynced          DateTime? @map("last_synced")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  @@map("studios")
}

model Genre {
  id                 Int       @id @default(autoincrement())
  genreName          String    @map("genre_name") @db.VarChar(255)
  relatedMoviesGenre Json?     @map("related_movies_genre")
  wordpressId        Int?      @unique @map("wordpress_id")
  podsData           Json?     @map("pods_data")
  syncStatus         String    @default("pending") @map("sync_status") @db.VarChar(20)
  lastSynced         DateTime? @map("last_synced")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  @@map("genres")
}

model Country {
  id                   Int       @id @default(autoincrement())
  countryName          String    @map("country_name") @db.VarChar(255)
  isoCode              String?   @map("iso_code") @db.VarChar(10)
  relatedMoviesCountry Json?     @map("related_movies_country")
  wordpressId          Int?      @unique @map("wordpress_id")
  podsData             Json?     @map("pods_data")
  syncStatus           String    @default("pending") @map("sync_status") @db.VarChar(20)
  lastSynced           DateTime? @map("last_synced")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  @@map("countries")
}

model Language {
  id                    Int       @id @default(autoincrement())
  languageName          String    @map("language_name") @db.VarChar(255)
  relatedMoviesLanguage Json?     @map("related_movies_language")
  wordpressId           Int?      @unique @map("wordpress_id")
  podsData              Json?     @map("pods_data")
  syncStatus            String    @default("pending") @map("sync_status") @db.VarChar(20)
  lastSynced            DateTime? @map("last_synced")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  @@map("languages")
}

model Experiment {
  id               Int               @id @default(autoincrement())
  experimentNumber String            @unique @map("experiment_number") @db.VarChar(10)
  eventDate        DateTime          @map("event_date") @db.Date
  eventHost        String            @map("event_host") @db.VarChar(255)
  postUrl          String?           @map("post_url")
  eventEncore      Boolean           @default(false) @map("event_encore")
  eventLocation    String            @map("event_location") @db.VarChar(255)
  eventImageWpId   Int?              @map("event_image_wp_id")
  eventImage       String?           @map("event_image")
  eventNotes       String?           @map("event_notes")
  eventAttendees   String?           @map("event_attendees")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  eventTime        String            @default("22:00") @map("event_time") @db.VarChar(5)
  eventTimezone    String            @default("America/New_York") @map("event_timezone") @db.VarChar(50)
  movieExperiments MovieExperiment[]

  @@map("experiments")
}

model MovieExperiment {
  id           Int        @id @default(autoincrement())
  movieId      Int        @map("movie_id")
  experimentId Int        @map("experiment_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  movie        Movie      @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([movieId, experimentId])
  @@map("movie_experiments")
}

model SyncLog {
  id           Int       @id @default(autoincrement())
  operation    String    @db.VarChar(50)
  entityType   String    @map("entity_type") @db.VarChar(50)
  entityId     Int       @map("entity_id")
  wordpressId  Int?      @map("wordpress_id")
  direction    String    @db.VarChar(20)
  status       String    @db.VarChar(20)
  errorMessage String?   @map("error_message")
  syncData     Json?     @map("sync_data")
  createdAt    DateTime  @default(now()) @map("created_at")
  completedAt  DateTime? @map("completed_at")

  @@map("sync_logs")
}

model PodsConfig {
  id            Int       @id @default(autoincrement())
  podName       String    @unique @map("pod_name") @db.VarChar(100)
  wordpressUrl  String    @map("wordpress_url")
  restBase      String    @map("rest_base") @db.VarChar(100)
  fieldMappings Json      @map("field_mappings")
  lastSync      DateTime? @map("last_sync")
  enabled       Boolean   @default(true)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("pods_config")
}
